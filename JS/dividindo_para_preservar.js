/*
 * ## üå± Sobre o Desafio 
 * Agora precisamos separar os CleanCoders em dois grupos, isso vai facilitar a execu√ß√£o de a√ß√µes estrat√©gicas. Para isso, foi
 * definido que os IDs pares devem ir para as barracas √† direita da estrada que corta o acampamento e os √≠mpares para a esquerda.
 * Aproveite essa oportunidade para criar um c√≥digo que verifique o ID do CleanCoder e indique para onde ele deve ir: Direita ou Esquerda.
 * 
 * ## O que deve ser feito?
 * Um jeito bem f√°cil de fazermos essa verifica√ß√£o √© utilizando o operador %. Com ele conseguimos verificar o resto de divis√µes.
 * 
 * ## ‚õ∫ Entradas automatizadas e Sa√≠das esperadas
 * As entradas ser√£o n√∫meros inteiros positivos que representar√£o os IDs dos CleanCoders. A sa√≠da deve ser se, de acordo com o ID,
 * o CleanCoder deve ir para as barracas da direita ou da esquerda.
 * 
 */

//Desafios JavaScript na DIO t√™m fun√ß√µes "gets" e "print" acess√≠veis globalmente:
//- "gets" : l√™ UMA linha com dado(s) de entrada (inputs) do usu√°rio;
//- "print": imprime um texto de sa√≠da (output), pulando linha.

let id = parseInt(gets());

/*
 * Conforme a descri√ß√£o do desafio, a aplica√ß√£o do pensamento computacional
 * √© validar se o resto da divis√£o √© um n√∫mero par ou impar.
 *
 */
 
if (id % 2 == 0) {
  print("Barraca da Direita");
} else {
  print("Barraca da Esquerda");
}